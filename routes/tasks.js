const express = require('express');
const router = express.Router();
const Task = require('../models/Task');
const Resource = require('../models/Resource');
const Assignment = require('../models/Assignment');

const axios = require('axios')
/**
 * @swagger
 * components:
 *   schemas:
 *     Task:
 *       type: object
 *       required:
 *         - name
 *         - duration
 *         - percentDone
 *         - startDate
 *         - endDate
 *       properties:
 *         _id:
 *           type: string
 *           description: MongoDB ObjectId (autogenerated)
 *         name:
 *           type: string
 *         duration:
 *           type: number
 *         percentDone:
 *           type: number
 *         startDate:
 *           type: string
 *         endDate:
 *           type: string
 *         parentId:
 *           type: string
 *           description: _id of the parent task (optional)
 *         expanded:
 *           type: boolean
 *       example:
 *         _id: "66dd1b9237a7fd0012e0f123"
 *         name: Maintenance Pipeline A
 *         duration: 3
 *         percentDone: 50
 *         startDate: "2025-01-01"
 *         endDate: "2025-01-04"
 *         parentId: "66dd1b9237a7fd0012e0f001"
 *         expanded: true
 */

/**
 * @swagger
 * /tasks:
 *   post:
 *     summary: Create a new task
 *     tags: [Tasks]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/Task'
 *     responses:
 *       201:
 *         description: Task created successfully
 *       400:
 *         description: Bad request
 */
router.post('/', async (req, res) => {
  try {
    const task = new Task(req.body);
    console.log(task)
    await task.save();
  
    res.status(201).json(task);
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
});

/**
 * @swagger
 * /tasks/{id}:
 *   put:
 *     summary: Update a task by _id
 *     tags: [Tasks]
 *     parameters:
 *       - in: path
 *         name: id
 *         schema:
 *           type: string
 *         required: true
 *         description: MongoDB ObjectId of the task
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/Task'
 *     responses:
 *       200:
 *         description: Task updated successfully
 *       400:
 *         description: Bad request
 */
router.put('/:id', async (req, res) => {
  const data = req.body;
  try {
    const task = await Task.findById(req.params.id);

    // === Update Task Fields ===
    task.name = data.name;
    task.startDate = data.startDate;
    task.endDate = data.endDate;
    task.duration = data.duration;
    task.percentDone = data.percentDone;
    task.expanded = data.expanded;
    task.businessUnit = data.businessUnit;
    task.requiredProfile = data.requiredProfile;

    task.requiredFormations = typeof data.requiredFormations === 'string'
      ? data.requiredFormations.split(',').map(f => f.trim())
      : [];

    task.requiredCompetences = typeof data.requiredCompetences === 'string'
      ? data.requiredCompetences.split(',').map(c => c.trim())
      : [];

    task.requiredCertifications = typeof data.requiredCertifications === 'string'
      ? data.requiredCertifications.split(',').map(c => c.trim())
      : [];

    // === Check if Task is Done or Failed ===
    const now = new Date();
    const endDate = new Date(task.endDate);
    const isDue = endDate <= now;

    if (task.percentDone === 100) {
      task.status = 'done';
    } else if (isDue && task.percentDone < 100) {
      task.status = 'failed';
    }

    // === If Task is Done or Failed, update resource history ===
    if (task.status === 'done' || task.status === 'failed') {
      const assignments = await Assignment.find({ event: req.params.id });

      for (let assignment of assignments) {
        const resource = await Resource.findById(assignment.resource._id);
        resource.currentTasks = resource.currentTasks.filter(tId => !tId.equals(task._id));
        resource.historiqueDePrestation.push(task._id);

        if (task.status === 'done') {
          resource.successfulAssignments += 1;
        } else {
          resource.failedAssignments += 1;
        }

        await resource.save();
      }
    }

    // === Save the Task before prediction ===
    await task.save();

    // === Remove existing assignments ===
    await Assignment.deleteMany({ event: task._id });

    // === Call the ML model ===
    const modelInput = {
      businessUnit: task.businessUnit,
      profile: task.requiredProfile,
      requiredCompetences: task.requiredCompetences,
      requiredFormations: task.requiredFormations,
      requiredCertifications: task.requiredCertifications,
    };

    const response = await axios.post('http://localhost:5000/predict', modelInput);
   
    console.log(response.data.predicted_resource_id)
    // === Create new assignments based on prediction ===
    // const newAssignments = recommendedResources.map((resourceId) => ({
    //   event: task._id,
    //   resource: resourceId,
    // }));
  const newAssignment = new Assignment({
    event: task._id,
    resource: response.data.predicted_resource_id
  })
  console.log(newAssignment)
  await newAssignment.save()
    // await Assignment.insertMany(newAssignments);

    res.json({
      task,
      assignments: newAssignment
    });

  } catch (err) {
    console.error("Update task error:", err.message);
    res.status(400).json({ error: err.message });
  }
});

/**
 * @swagger
 * /tasks/{id}:
 *   delete:
 *     summary: Delete a task by _id
 *     tags: [Tasks]
 *     parameters:
 *       - in: path
 *         name: id
 *         schema:
 *           type: string
 *         required: true
 *         description: MongoDB ObjectId of the task
 *     responses:
 *       200:
 *         description: Task deleted successfully
 *       404:
 *         description: Task not found
 */
router.delete('/:id', async (req, res) => {
  try {
    const deleted = await Task.findByIdAndDelete(req.params.id);
    const deletedAssignments = await Assignment.deleteMany({event:req.params.id})
    if (!deleted) {
      return res.status(404).json({ message: 'Task not found' });
    }
    res.json({ message: 'Task deleted successfully' });
  } catch (err) {
    res.status(500).json({ message: 'Internal server error' });
  }
});

module.exports = router;
